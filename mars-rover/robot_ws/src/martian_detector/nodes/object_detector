#!/usr/bin/env python

import rospy
import boto3

from std_msgs.msg import String
from sensor_msgs.msg import CompressedImage


CAMERA_TOPIC = rospy.get_param('~/object_detector/camera_topic', '/raspicam_node/image/compressed')
AWS_REGION = rospy.get_param('~/object_detector/aws_region', 'us-west-2')

class ObjectDetector():

    def __init__(self):
        self.pub = rospy.Publisher('/detected_objects', String, queue_size=1)
        self.rekog = boto3.client('rekognition', AWS_REGION)

    def process_image(self):
        # Get picture from appropriate camera topic and send to Rekognition for labels
        rospy.loginfo('Processing image via Amazon Rekognition')
        img = self.get_image()

        # Call Rekognition
        try:
            response = self.rekog.detect_labels(
                Image={'Bytes': img},
                MaxLabels=10
            )
            labels = self.sort_labels(response)
            rospy.loginfo('Following labels detected: %s' % (labels))
        except Exception as e:
            rospy.logerr('Error processing Rekognition: %s', e)
        else:
            # Write detected lables to /detected_objects
            self.pub.publish(",".join(labels))
        
        return
    
    def get_image(self):
        '''receive one compressed image from camera and return raw image'''
        try:
            image = rospy.wait_for_message(CAMERA_TOPIC, CompressedImage, timeout=3).data
        except Exception as e:
            rospy.logerr('Error getting image from camera: %s', e)
        else:
            return image
            
    def sort_labels(self, rek_response):
        '''Return labels sorted by confidence as JSON object'''
        labels = rek_response['Labels']
        list = []
        sorted_list = sorted(labels, key=lambda k: k['Confidence'])
        for i in sorted_list:
            list.append(i['Name'])
        return(list)

def main():
    rospy.init_node('object_detector')
    
    detector = ObjectDetector()
    
    rate = rospy.Rate(1) # Process an image once a second
    while not rospy.is_shutdown():
        detector.process_image()
        rate.sleep()


if __name__ == '__main__':
    main()