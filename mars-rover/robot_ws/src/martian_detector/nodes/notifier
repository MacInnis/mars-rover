#!/usr/bin/env python
import rospy
import boto3
from std_msgs.msg import String
from std_msgs.msg import Int64MultiArray

aws_region = rospy.get_param('~/notifier/aws_region', 'us-west-2')
s3_bucket_name = rospy.get_param('~/notifier/s3_bucket_name')
search_object = rospy.get_param('~/notifier/search_object', 'Alien')
phone_number = rospy.get_param('~/notifier/phone_number', '')

s3 = boto3.resource('s3', aws_region)
sns = boto3.client('sns', aws_region)

class Notifier():

    def __init__(self):
        rospy.loginfo('Initializing Notifier node.')
        self.object_sub = rospy.Subscriber ('/detected_objects', String, self.notify)
        self.pub = rospy.Publisher('/led_cmds', Int64MultiArray, queue_size=1)

    def notify(self, msg): 
        
        found_objects = msg.data
        rospy.loginfo('Detected an object.  Object found: %s.', found_objects)                
            
        try:
            # log objects found to S3 for reporting
            s3.Object(s3_bucket_name, 'web/objects.txt').put(
                ACL='public-read', 
                Body=found_objects)

            led_msg = Int64MultiArray()
            
            #see if we found the search object.  if so, send alert.
            objects = found_objects.split(',')
            if search_object in objects:
                rospy.loginfo('Found %s! Just what I was looking for!', search_object)
                
                #Alien found.  Send message to LED topic so the display will update if it's being used.
                led_msg.data = [2, 1] # ^^
                self.pub.publish(led_msg)

                #send SMS message for the alert
                if phone_number and len(phone_number) > 8: 
                    rospy.loginfo('Sending SMS to %s', phone_number)
                    sns.publish(PhoneNumber=phone_number, Message='Alert!  %s detected!' % search_object)
            else:
                #No alien found.  Publish message for simple face
                led_msg.data = [0, 1] # -_-
                self.pub.publish(led_msg)

        except Exception as e:
            rospy.logerr('Error logging or sending alert. \n\n %s', str(e))

def main():
    rospy.init_node('notifier')
    notifier = Notifier()
    rospy.spin()

if __name__ == '__main__':
    main()